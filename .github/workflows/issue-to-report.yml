name: Issue → Case report (auto)

on:
  issues:
    types: [labeled]

concurrency:
  group: issue-${{ github.event.issue.number }}
  cancel-in-progress: true

jobs:
  issue-to-report:
    if: >
      github.event.action == 'labeled' &&
      github.event.label.name == 'new-case' &&
      github.event.issue.state == 'open'
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write
      issues: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build report and create PR
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue || {};
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const base = context.payload.repository.default_branch || 'main';

            // Helper to grab Issue Form sections (works with GitHub issue forms that render with "### <field>")
            const body = issue.body || '';
            const grab = (label) => {
              const re = new RegExp(`(?<=###\\s*${label}[\\s\\S]*?)\\n\\n([\\s\\S]*?)(?=\\n###|$)`, 'i');
              const m = body.match(re);
              return m ? m[1].trim() : '';
            };

            const slugify = (s) =>
              (s || '').toLowerCase().replace(/[^a-z0-9]+/g,'-').replace(/^-+|-+$/g,'');

            // Map fields from your Issue Template — adjust labels exactly as in the template if different
            let case_id = grab('Case ID (slug-friendly)') || grab('incident_id') || '';
            const case_title = grab('Case Title') || issue.title || `case-${issue.number}`;
            const summary = grab('Executive summary') || grab('Summary') || '';
            const timeline = grab('Timeline') || '';
            const artifacts = grab('Artifacts / IOCs') || grab('Artifacts') || '';
            const analysis = grab('Technical analysis') || '';
            const mitigation = grab('Actions taken / Mitigation') || grab('Mitigation') || '';
            const recommendations = grab('Recommendations / Next steps') || grab('Recommendations') || '';
            const ownerName = grab('Case owner') || grab('owner') || '';

            // ensure valid slug
            case_id = slugify(case_id || case_title);
            if (!case_id) case_id = `case-${issue.number}`;

            const headBranch = `auto/case/${case_id}`;
            const headRef = `refs/heads/${headBranch}`;
            const shortRef = `heads/${headBranch}`;

            // Prepare markdown report (you can customize template here)
            const reportMd = [
              `# ${case_title} (${case_id})`,
              ``,
              `**Case owner:** ${ownerName || '—'}`,
              `**Created:** ${issue.created_at || new Date().toISOString()}`,
              ``,
              `## Executive summary`,
              summary || '—',
              ``,
              `## Timeline`,
              timeline || '—',
              ``,
              `## Artifacts / IOCs`,
              artifacts || '—',
              ``,
              `## Technical analysis`,
              analysis || '—',
              ``,
              `## Actions taken / Mitigation`,
              mitigation || '—',
              ``,
              `## Recommendations / Next steps`,
              recommendations || '—',
              ``,
              `## References`,
              `- Issue: ${issue.html_url}`,
              ``
            ].join('\n');

            const readmeMd = [
              `# ${case_title} (${case_id})`,
              ``,
              `**Summary:** ${summary || '—'}`,
              `**Owner:** ${ownerName || '—'}`,
              ``
            ].join('\n');

            // get base ref
            const baseRef = await github.rest.git.getRef({ owner, repo, ref: `heads/${base}` });

            // create branch (if exists, read its current sha)
            let parentSha;
            try {
              await github.rest.git.createRef({ owner, repo, ref: headRef, sha: baseRef.data.object.sha });
              parentSha = baseRef.data.object.sha;
            } catch (e) {
              if (e.status !== 422) throw e;
              const headRefData = await github.rest.git.getRef({ owner, repo, ref: shortRef });
              parentSha = headRefData.data.object.sha;
            }

            // get parent commit
            const parentCommit = await github.rest.git.getCommit({ owner, repo, commit_sha: parentSha });

            // create blobs for files
            const toB64 = (s) => Buffer.from(s, 'utf8').toString('base64');
            const reportBlob = await github.rest.git.createBlob({
              owner, repo, content: toB64(reportMd), encoding: 'base64'
            });
            const readmeBlob = await github.rest.git.createBlob({
              owner, repo, content: toB64(readmeMd), encoding: 'base64'
            });

            // create tree with files
            const tree = await github.rest.git.createTree({
              owner, repo, base_tree: parentCommit.data.tree.sha,
              tree: [
                { path: `cases/${case_id}/REPORT.md`, mode: '100644', type: 'blob', sha: reportBlob.data.sha },
                { path: `cases/${case_id}/README.md`, mode: '100644', type: 'blob', sha: readmeBlob.data.sha }
              ]
            });

            // create commit
            const commit = await github.rest.git.createCommit({
              owner, repo, message: `Add case: ${case_id}`, tree: tree.data.sha, parents: [parentSha]
            });

            // update branch
            await github.rest.git.updateRef({ owner, repo, ref: shortRef, sha: commit.data.sha, force: true });

            // open PR (ignore 422 if exists)
            const prTitle = `Add case: ${case_title} (${case_id})`;
            try {
              await github.rest.pulls.create({
                owner, repo, title: prTitle, head: headBranch, base,
                body: `Auto-generated from issue #${issue.number}.`
              });
            } catch (e) {
              if (e.status !== 422) throw e;
            }

            // optionally: add label 'archived' to issue so you know it was exported
            try {
              await github.rest.issues.addLabels({ owner, repo, issue_number: issue.number, labels: ['archived'] });
            } catch (e) {
              // ignore
            }

            core.setOutput('case_id', case_id);
            core.setOutput('pr', prTitle);
