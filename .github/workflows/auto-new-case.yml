name: Auto create case from issue

on:
  issues:
    types: [opened, edited, labeled]

jobs:
  generate-case:
    # запускать только если у issue есть label new-case
    if: >
      github.event.issue.state == 'open' &&
      contains(join(github.event.issue.labels.*.name, ','), 'new-case')
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write
      issues: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Parse fields
        id: parse
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const body = issue.body || '';

            function grab(label){
              const re = new RegExp(`(?<=###\\s*${label}[\\s\\S]*?)\\n\\n([\\s\\S]*?)(?=\\n###|$)`, 'i');
              const m = body.match(re);
              return m ? m[1].trim() : '';
            }

            const fromTitle = (issue.title||'')
              .toLowerCase().replace(/[^a-z0-9]+/g,'-').replace(/^-+|-+$/g,'').slice(0,60);

            const id = (grab('Case ID \\(slug-friendly\\)') || fromTitle || `case-${issue.number}`)
              .toLowerCase().replace(/[^a-z0-9-]/g,'-').replace(/^-+|-+$/g,'');

            const title = grab('Case Title') || issue.title || id;
            const summary = grab('Summary') || '—';

            core.setOutput('id', id);
            core.setOutput('title', title);
            core.setOutput('summary', summary);

      - name: Create branch and file
        uses: actions/github-script@v7
        env:
          CASE_ID: ${{ steps.parse.outputs.id }}
          CASE_TITLE: ${{ steps.parse.outputs.title }}
          CASE_SUMMARY: ${{ steps.parse.outputs.summary }}
        with:
          script: |
            const id = process.env.CASE_ID;
            const title = process.env.CASE_TITLE;
            const summary = process.env.CASE_SUMMARY;

            const base = context.payload.repository.default_branch;

            // get base ref
            const { data: baseRef } = await github.rest.git.getRef({
              owner: context.repo.owner, repo: context.repo.repo, ref: `heads/${base}`
            });

            // create branch
            const headRef = `refs/heads/auto/case/${id}`;
            await github.rest.git.createRef({
              owner: context.repo.owner, repo: context.repo.repo, ref: headRef, sha: baseRef.object.sha
            });

            // content for the new case
            const content = `# ${title} (${id})\n\n## Summary\n${summary}\n`;

            // last commit & tree
            const { data: lastCommit } = await github.rest.git.getCommit({
              owner: context.repo.owner, repo: context.repo.repo, commit_sha: baseRef.object.sha
            });

            // blob
            const { data: blob } = await github.rest.git.createBlob({
              owner: context.repo.owner, repo: context.repo.repo,
              content: Buffer.from(content, 'utf8').toString('base64'),
              encoding: 'base64'
            });

            // tree with new file
            const { data: tree } = await github.rest.git.createTree({
              owner: context.repo.owner, repo: context.repo.repo, base_tree: lastCommit.tree.sha,
              tree: [{
                path: `cases/${id}/README.md`,
                mode: '100644',
                type: 'blob',
                sha: blob.sha
              }]
            });

            // commit
            const { data: commit } = await github.rest.git.createCommit({
              owner: context.repo.owner, repo: context.repo.repo,
              message: `Add case: ${id}`,
              tree: tree.sha,
              parents: [baseRef.object.sha]
            });

            // update branch ref
            await github.rest.git.updateRef({
              owner: context.repo.owner, repo: context.repo.repo,
              ref: `heads/auto/case/${id}`,
              sha: commit.sha,
              force: false
            });

      - name: Open PR
        uses: actions/github-script@v7
        env:
          CASE_ID: ${{ steps.parse.outputs.id }}
          CASE_TITLE: ${{ steps.parse.outputs.title }}
        with:
          script: |
            const id = process.env.CASE_ID;
            const title = process.env.CASE_TITLE;
            const base = context.payload.repository.default_branch;

            await github.rest.pulls.create({
              owner: context.repo.owner, repo: context.repo.repo,
              title: `Add case: ${title} (${id})`,
              head: `auto/case/${id}`,
              base,
              body: `Auto-generated from issue #${context.payload.issue.number}.`
            });
