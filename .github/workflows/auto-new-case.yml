name: Auto create case from issue (full report)

on:
  issues:
    types: [opened, edited, labeled]

jobs:
  generate-case:
    if: >
      github.event.issue.state == 'open' &&
      contains(join(github.event.issue.labels.*.name, ','), 'new-case')
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write
      issues: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate report files
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            const issue = context.payload.issue;
            const body = issue.body || '';
            const created_at = issue.created_at || new Date().toISOString();

            // helper: grab section text by label (from Issue Form content)
            const grab = (label) => {
              const re = new RegExp(`(?<=###\\s*${label}[\\s\\S]*?)\\n\\n([\\s\\S]*?)(?=\\n###|$)`, 'i');
              const m = body.match(re);
              if (m) return m[1].trim();
              // fallback: try to find by label line like "Case ID: ..." in body
              const re2 = new RegExp(`${label}:\\s*([\\s\\S]*?)$`, 'i');
              const m2 = body.match(re2);
              return m2 ? m2[1].trim() : '';
            };

            // In many GitHub Issue Forms, the form is rendered with headings '### ...'
            // Grab values (fall back to simple parsing)
            const case_id = grab('Case ID (slug-friendly)') || (issue.title||'').toLowerCase().replace(/[^a-z0-9]+/g,'-').slice(0,60);
            const case_title = grab('Case Title') || issue.title || case_id;
            const summary = grab('Executive summary') || grab('Summary') || '';
            const timeline = grab('Timeline') || '';
            const artifacts = grab('Artifacts / IOCs') || grab('Artifacts') || '';
            const analysis = grab('Technical analysis') || '';
            const mitigation = grab('Actions taken / Mitigation') || grab('Mitigation') || '';
            const recommendations = grab('Recommendations / Next steps') || grab('Recommendations') || '';
            const owner = grab('Case owner') || '';

            // load template
            const tplPath = path.join(process.env.GITHUB_WORKSPACE, 'templates', 'CASE_REPORT.md');
            let tpl = '';
            try {
              tpl = fs.readFileSync(tplPath, 'utf8');
            } catch (e) {
              tpl = `# ${case_title} (${case_id})\n\n**Owner:** ${owner}\n\n${summary}\n`; // fallback
            }

            // replace placeholders
            const report = tpl
              .replace(/{{CASE_ID}}/g, case_id)
              .replace(/{{CASE_TITLE}}/g, case_title)
              .replace(/{{OWNER}}/g, owner || '—')
              .replace(/{{CREATED_AT}}/g, created_at)
              .replace(/{{SUMMARY}}/g, summary || '—')
              .replace(/{{TIMELINE}}/g, timeline || '—')
              .replace(/{{ARTIFACTS}}/g, artifacts || '—')
              .replace(/{{ANALYSIS}}/g, analysis || '—')
              .replace(/{{MITIGATION}}/g, mitigation || '—')
              .replace(/{{RECOMMENDATIONS}}/g, recommendations || '—')
              .replace(/{{ISSUE_URL}}/g, issue.html_url || '')
              .replace(/{{PR_URL}}/g, '');

            // create short README (card)
            const readme = `# ${case_title} (${case_id})\n\n**Summary:** ${summary || '—'}\n\n**Owner:** ${owner || '—'}\n`;

            // Prepare git objects and commit into new branch auto/case/<id>
            const ownerRepo = context.repo;
            const ownerName = ownerRepo.owner;
            const repoName = ownerRepo.repo;
            const base = context.payload.repository.default_branch;
            const headBranch = `auto/case/${case_id}`;
            const headRef = `refs/heads/${headBranch}`;

            // 1) get base ref
            const baseRef = await github.rest.git.getRef({ owner: ownerName, repo: repoName, ref: `heads/${base}` });

            // 2) create branch if missing
            let parentSha;
            try {
              await github.rest.git.createRef({ owner: ownerName, repo: repoName, ref: headRef, sha: baseRef.data.object.sha });
              parentSha = baseRef.data.object.sha;
            } catch (e) {
              if (e.status !== 422) throw e;
              const headRefData = await github.rest.git.getRef({ owner: ownerName, repo: repoName, ref: `heads/${headBranch}` });
              parentSha = headRefData.data.object.sha;
            }

            // 3) get parent commit tree
            const parentCommit = await github.rest.git.getCommit({ owner: ownerName, repo: repoName, commit_sha: parentSha });

            // 4) create blobs for files
            const reportBlob = await github.rest.git.createBlob({
              owner: ownerName, repo: repoName,
              content: Buffer.from(report, 'utf8').toString('base64'), encoding: 'base64'
            });
            const readmeBlob = await github.rest.git.createBlob({
              owner: ownerName, repo: repoName,
              content: Buffer.from(readme, 'utf8').toString('base64'), encoding: 'base64'
            });

            // 5) create tree with both files
            const tree = await github.rest.git.createTree({
              owner: ownerName, repo: repoName, base_tree: parentCommit.data.tree.sha,
              tree: [
                { path: `cases/${case_id}/README.md`, mode: '100644', type: 'blob', sha: reportBlob.data.sha ? reportBlob.data.sha : reportBlob.sha },
                { path: `cases/${case_id}/REPORT.md`, mode: '100644', type: 'blob', sha: readmeBlob.data.sha ? readmeBlob.data.sha : readmeBlob.sha }
              ]
            });

            // 6) create commit
            const commit = await github.rest.git.createCommit({
              owner: ownerName, repo: repoName, message: `Add case: ${case_id}`, tree: tree.data.sha, parents: [parentSha]
            });

            // 7) update branch
            await github.rest.git.updateRef({ owner: ownerName, repo: repoName, ref: headRef, sha: commit.data.sha, force: false });

            // 8) open PR (ignore 422 if exists)
            const prTitle = `Add case: ${case_title} (${case_id})`;
            try {
              const pr = await github.rest.pulls.create({
                owner: ownerName, repo: repoName, title: prTitle, head: headBranch, base, body: `Auto-generated from issue #${issue.number}.`
              });
              // write PR url into report file by updating the file (optional)
              // (We skip updating PR_URL to simplify — PR URL will show in issue/PR tab)
            } catch (e) {
              if (e.status !== 422) throw e;
            }
