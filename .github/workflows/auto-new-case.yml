name: Auto create case from issue (full report)

on:
  issues:
    types: [opened, edited, labeled]

jobs:
  generate-case:
    if: >
      github.event.issue.state == 'open' &&
      contains(join(github.event.issue.labels.*.name, ','), 'new-case')
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write
      issues: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Parse, create/advance branch, commit files, open PR
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const body  = issue.body || '';

            const grab = (label) => {
              const re = new RegExp(`(?<=###\\s*${label}[\\s\\S]*?)\\n\\n([\\s\\S]*?)(?=\\n###|$)`, 'i');
              const m = body.match(re); return m ? m[1].trim() : '';
            };
            const slugify = (s) =>
              (s || '').toLowerCase().replace(/[^a-z0-9]+/g,'-').replace(/^-+|-+$/g,'');

            let caseId = slugify(grab('Case ID \\(slug-friendly\\)'));
            const caseTitle = grab('Case Title') || issue.title || 'case';
            const summary   = grab('Executive summary') || grab('Summary') || '';
            const timeline  = grab('Timeline') || '';
            const artifacts = grab('Artifacts / IOCs') || '';
            const analysis  = grab('Technical analysis') || '';
            const mitigation = grab('Actions taken / Mitigation') || '';
            const recommendations = grab('Recommendations / Next steps') || '';
            const ownerName = grab('Case owner') || '—';

            if (!caseId) caseId = slugify(caseTitle);
            if (!caseId) caseId = `case-${issue.number}`;

            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const base  = context.payload.repository.default_branch;
            const headBranch = `auto/case/${caseId}`;
            const fullRef = `refs/heads/${headBranch}`;
            const shortRef = `heads/${headBranch}`;

            // 1) base ref
            const baseRef = await github.rest.git.getRef({ owner, repo, ref: `heads/${base}` });

            // 2) create branch if missing
            let parentSha;
            try {
              await github.rest.git.createRef({ owner, repo, ref: fullRef, sha: baseRef.data.object.sha });
              parentSha = baseRef.data.object.sha;
            } catch (e) {
              if (e.status !== 422) throw e;
              const headRef = await github.rest.git.getRef({ owner, repo, ref: shortRef });
              parentSha = headRef.data.object.sha;
            }

            // 3) files content
            const reportMd = [
              `# ${caseTitle} (${caseId})`,
              ``,
              `**Case owner:** ${ownerName}`,
              `**Executive summary:** ${summary || '—'}`,
              ``,
              `---`,
              ``,
              `## 1) Timeline`,
              timeline || '—',
              ``,
              `## 2) Artifacts / IOCs`,
              artifacts || '—',
              ``,
              `## 3) Technical analysis`,
              analysis || '—',
              ``,
              `## 4) Actions taken (containment & remediation)`,
              mitigation || '—',
              ``,
              `## 5) Recommendations`,
              recommendations || '—',
              ``,
              `## 6) References`,
              `- Issue: ${issue.html_url}`
            ].join('\n');

            const readmeMd = [
              `# ${caseTitle} (${caseId})`,
              ``,
              `**Summary:** ${summary || '—'}`,
              `**Owner:** ${ownerName}`
            ].join('\n');

            // 4) parent tree
            const parentCommit = await github.rest.git.getCommit({ owner, repo, commit_sha: parentSha });

            // 5) blobs
            const b64 = (s) => Buffer.from(s, 'utf8').toString('base64');
            const reportBlob = await github.rest.git.createBlob({ owner, repo, content: b64(reportMd), encoding: 'base64' });
            const readmeBlob = await github.rest.git.createBlob({ owner, repo, content: b64(readmeMd), encoding: 'base64' });

            // 6) tree with two files
            const tree = await github.rest.git.createTree({
              owner, repo, base_tree: parentCommit.data.tree.sha,
              tree: [
                { path: `cases/${caseId}/REPORT.md`, mode: '100644', type: 'blob', sha: reportBlob.data.sha },
                { path: `cases/${caseId}/README.md`, mode: '100644', type: 'blob', sha: readmeBlob.data.sha }
              ]
            });

            // 7) commit
            const commit = await github.rest.git.createCommit({
              owner, repo, message: `Add case: ${caseId}`, tree: tree.data.sha, parents: [parentSha]
            });

            // 8) update ref — ВАЖНО: используем "heads/..." (без префикса refs/)
            await github.rest.git.updateRef({ owner, repo, ref: shortRef, sha: commit.data.sha, force: false });

            // 9) PR
            const prTitle = `Add case: ${caseTitle} (${caseId})`;
            try {
              await github.rest.pulls.create({ owner, repo, title: prTitle, head: headBranch, base, body: `Auto-generated from issue #${issue.number}.` });
            } catch (e) {
              if (e.status !== 422) throw e;
            }
